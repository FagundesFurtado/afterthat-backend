name: Node CI

on: 
  push:
    branches:
      - master

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
    - name: Preparing .env file
      env:
        CONFIG: ${{ secrets.CONFIGURATION}}
      - run: |
        echo "$CONFIG" > .env
        echo "$CONFIG"
    - uses: actions/upload-artifact@master
      with:
        name: config
        path: .env
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v1
  #   - uses: actions/download-artifact@master
  #     with:
  #       name: config
  #       path: .
  #   - name: Install Node.js
  #     uses: actions/setup-node@v1
  #     with:
  #       node-version: '12.x'
  #   - name: Install npm dependencies
  #     run: npm install
  #   - name: Run build production
  #     run: npm run build
  #   - name: Compress files
  #     run: tar -czf build.tar.gz ./dist .env package*.json pm2.json docker-compose.yml Dockerfile
  #   - uses: actions/upload-artifact@master
  #     with:
  #       name: master
  #       path: build.tar.gz
  # deploy:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/download-artifact@master
  #   - name: Send artifacts to Server
  #     uses: easingthemes/ssh-deploy@v2.1.1
  #     env:
  #         SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
  #         ARGS: "-rltgoDzvO --delete"
  #         SOURCE: "build.tar.gz"
  #         REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  #         REMOTE_USER: ${{ secrets.REMOTE_USER }}
  #         TARGET: ${{ secrets.REMOTE_TARGET }}
  #   - name: Decompres docker
  #     uses: fifsky/ssh-action@master
  #     with:
  #       command: |
  #         tar-zvf build.tar.gz && rm build.tar.gz
  #       host: ${{ secrets.REMOTE_HOST }}
  #       user: ${{ secrets.REMOTE_USER }}
  #       key: ${{ secrets.SERVER_SSH_KEY}}
  #   - name: Start docker
  #     uses: fifsky/ssh-action@master
  #     with:
  #       command: |
  #         docker-compose -f ~/apps/backend-afterthat/docker-compose.yml up -d --force-recreate --build
  #       host: ${{ secrets.REMOTE_HOST }}
  #       user: ${{ secrets.REMOTE_USER }}
  #       key: ${{ secrets.SERVER_SSH_KEY}}